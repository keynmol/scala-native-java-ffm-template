// Generated by jextract

package myscalalib_bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class interface_h {

    interface_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int MULTIPLY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MULTIPLY = 1
     * }
     */
    public static int MULTIPLY() {
        return MULTIPLY;
    }
    private static final int ADD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ADD = 2
     * }
     */
    public static int ADD() {
        return ADD;
    }

    private static class myscalalib_run {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            interface_h.C_FLOAT,
            interface_h.C_POINTER,
            interface_h.C_FLOAT,
            interface_h.C_FLOAT
        );

        public static final MemorySegment ADDR = interface_h.findOrThrow("myscalalib_run");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float myscalalib_run(myscalalib_config *config, float left, float right)
     * }
     */
    public static FunctionDescriptor myscalalib_run$descriptor() {
        return myscalalib_run.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float myscalalib_run(myscalalib_config *config, float left, float right)
     * }
     */
    public static MethodHandle myscalalib_run$handle() {
        return myscalalib_run.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float myscalalib_run(myscalalib_config *config, float left, float right)
     * }
     */
    public static MemorySegment myscalalib_run$address() {
        return myscalalib_run.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float myscalalib_run(myscalalib_config *config, float left, float right)
     * }
     */
    public static float myscalalib_run(MemorySegment config, float left, float right) {
        var mh$ = myscalalib_run.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("myscalalib_run", config, left, right);
            }
            return (float)mh$.invokeExact(config, left, right);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

